import asyncio
import datetime
import os
import re
import calendar
import io
import cv2
import numpy as np
from pyzbar import pyzbar
import aiohttp
from bs4 import BeautifulSoup
from dotenv import load_dotenv


from aiogram import Bot, Dispatcher, F, types

from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, ChosenInlineResult, BotCommand

from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from motor.motor_asyncio import AsyncIOMotorClient

from pymongo.errors import DuplicateKeyError

from bson import ObjectId
import aiocron
from loguru import logger
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.chat_action import ChatActionSender


# -----------------------------
# Configuration and Setup
# -----------------------------
MAX_CALLBACK_DATA_LEN = 64
MEDS_PER_PAGE = 5

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
DB_NAME = os.getenv("DB_NAME")
COLLECTION_NAME = os.getenv("COLLECTION_NAME")
BOT_USERNAME = os.getenv("BOT_USERNAME")

logger.add("bot.log", rotation="1 MB", level="INFO")
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)
client = AsyncIOMotorClient(MONGO_URI)
db = client[DB_NAME]
med_collection = db[COLLECTION_NAME]



# --- CallbackData Factories ---
class MedAction(CallbackData, prefix="med"):
    action: str
    item_id: str | None = None # ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    item_name: str | None = None
    # -------------------------------------------------
    field: str | None = None
    page: int | None = None
    confirm: bool | None = None

class CalendarNav(CallbackData, prefix="cal"):
    action: str
    year: int
    month: int
    day: int | None = None

# --- FSM States ---
class AddMedicine(StatesGroup):
    waiting_for_name = State()
    waiting_for_quantity = State()
    waiting_for_notes = State()
    waiting_for_exp_date = State()
    # –î–∞–Ω–Ω—ã–µ –≤ state
    prompt_chat_id: int | None = None
    prompt_message_id: int | None = None
    calendar_message_id: int | None = None
    calendar_year: int | None = None
    calendar_month: int | None = None
    name: str | None = None
    name_lower: str | None = None
    quantity: str | None = None
    notes: str | None = None
    exp_date: str | None = None

class EditMedicine(StatesGroup):
    waiting_for_new_value = State()
    med_id: str | None = None
    med_name: str | None = None
    field_to_edit: str | None = None
    user_id: int | None = None
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–¥–Ω–æ –∏–∑)
    prompt_chat_id: int | None = None
    prompt_message_id: int | None = None # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    inline_message_id: str | None = None # Inline —Å–æ–æ–±—â–µ–Ω–∏–µ
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (–º–æ–∂–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–¥–Ω–∏–º –∏–∑ –≤–µ—Ä—Ö–Ω–∏—Ö)
    calendar_message_id: int | str | None = None # –ú–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ str
    calendar_year: int | None = None
    calendar_month: int | None = None


# -----------------------------
# Keyboards
# -----------------------------

def get_confirm_barcode_update_keyboard(med_name: str) -> InlineKeyboardMarkup:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ."""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            # –ü–µ—Ä–µ–¥–∞–µ–º item_name –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
            InlineKeyboardButton(text="üîÑ –î–∞, –æ–±–Ω–æ–≤–∏—Ç—å", callback_data=MedAction(action="confirm_barcode_update", item_name=med_name).pack()),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ", callback_data=MedAction(action="add_different_barcode").pack())
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])
    return kb


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ë–ï–ó –ö–ù–û–ü–ö–ò –ü–û–ò–°–ö–ê)."""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíä –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤", callback_data=MedAction(action="list", page=1).pack())],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data=MedAction(action="add").pack())],
        [InlineKeyboardButton(
            text=f"üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
            switch_inline_query_current_chat=" " # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ @–∏–º—è_–±–æ—Ç–∞
            # ------------------------------------------
        )],
    ])
    return kb

def get_medicine_list_keyboard(medicines: list, current_page: int = 1, page_size: int = MEDS_PER_PAGE) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç item_id)."""
    buttons = []
    total_items = len(medicines)
    total_pages = (total_items + page_size - 1) // page_size

    start_index = (current_page - 1) * page_size
    end_index = start_index + page_size
    paginated_medicines = medicines[start_index:end_index]

    if paginated_medicines:
        buttons.extend([
            [InlineKeyboardButton(
                text=f"{med['name']} ({med['quantity']}) | –°—Ä–æ–∫: {med.get('exp_date', 'N/A')}",
                # –£–±–∏—Ä–∞–µ–º context, –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º item_id
                callback_data=MedAction(action="view", item_id=str(med['_id'])).pack()
             )] for med in paginated_medicines
        ])
    else:
        buttons.append([InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="dummy")])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_buttons = []
    if current_page > 1:
        page_buttons.append(
            # –£–±–∏—Ä–∞–µ–º context
            InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥.", callback_data=MedAction(action="page", page=current_page - 1).pack())
        )
    if total_pages > 1:
         page_buttons.append(
             InlineKeyboardButton(text=f"üìÑ {current_page}/{total_pages}", callback_data="dummy_page_info")
         )
    if current_page < total_pages:
        page_buttons.append(
            # –£–±–∏—Ä–∞–µ–º context
            InlineKeyboardButton(text="–°–ª–µ–¥. ‚ñ∂Ô∏è", callback_data=MedAction(action="page", page=current_page + 1).pack())
        )
    if page_buttons:
        buttons.append(page_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–∞)
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data=MedAction(action="add").pack())])
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è callback_data, —á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å —Å MedAction
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä context ---
def get_medicine_details_keyboard(med_id: str, is_inline: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç item_id)."""
    kb_rows = [
        # –£–±–∏—Ä–∞–µ–º context
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=MedAction(action="edit", item_id=med_id, field="name").pack())],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=MedAction(action="edit", item_id=med_id, field="quantity").pack())],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ó–∞–º–µ—Ç–∫–∏", callback_data=MedAction(action="edit", item_id=med_id, field="notes").pack())],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏", callback_data=MedAction(action="edit", item_id=med_id, field="exp_date").pack())],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data=MedAction(action="delete", item_id=med_id).pack())]
    ]
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–∞–≤–∏—Å–∏—Ç –æ—Ç is_inline
    if not is_inline:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        kb_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=MedAction(action="list", page=1).pack())])
    else:
        kb_rows.append([InlineKeyboardButton(text="‚òëÔ∏è –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=MedAction(action="hide_inline_info").pack())])

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä context ---
def get_confirm_delete_keyboard(med_id: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç item_id)."""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            # –£–±–∏—Ä–∞–µ–º context
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=MedAction(action="confirm_delete", item_id=med_id, confirm=True).pack()),
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π (—Ç–æ–∂–µ –±–µ–∑ context)
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=MedAction(action="view", item_id=med_id).pack())
        ]
    ])
    return kb


def get_cancel_keyboard(context: str | None = None) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è FSM, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –≤—Å–µ–≥–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")] # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    ])
    return kb

# -----------------------------
# Calendar Keyboard Generation
# -----------------------------
async def create_calendar(year: int | None = None, month: int | None = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."""
    now = datetime.datetime.now()
    if year is None: year = now.year
    if month is None: month = now.month

    kb_builder = []

    # Header: << Year < Month > Year >>
    kb_builder.append([
        InlineKeyboardButton(text="<<", callback_data=CalendarNav(action="prev_year", year=year, month=month).pack()),
        InlineKeyboardButton(text="<", callback_data=CalendarNav(action="prev_month", year=year, month=month).pack()),
        InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data=CalendarNav(action="ignore", year=year, month=month).pack()), # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
        InlineKeyboardButton(text=">", callback_data=CalendarNav(action="next_month", year=year, month=month).pack()),
        InlineKeyboardButton(text=">>", callback_data=CalendarNav(action="next_year", year=year, month=month).pack()),
    ])

    # Weekdays
    kb_builder.append([
        InlineKeyboardButton(text=day, callback_data=CalendarNav(action="ignore", year=year, month=month).pack()) for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    ])

    # Days
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(InlineKeyboardButton(text=" ", callback_data=CalendarNav(action="ignore", year=year, month=month).pack()))
            else:
                week_buttons.append(InlineKeyboardButton(
                    text=str(day),
                    callback_data=CalendarNav(action="select_day", year=year, month=month, day=day).pack()
                ))
        kb_builder.append(week_buttons)

     # Cancel button (using the generic cancel callback)
    kb_builder.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã", callback_data="cancel_action")])


    return InlineKeyboardMarkup(inline_keyboard=kb_builder)


# -----------------------------
# Helper Functions
# -----------------------------
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω inline_message_id ---
async def safe_edit_message(text: str,
                           chat_id: int | None = None,
                           message_id: int | None = None,
                           inline_message_id: str | None = None,
                           reply_markup: InlineKeyboardMarkup | None = None,
                           parse_mode: str | None = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ inline)."""
    if not (chat_id and message_id) and not inline_message_id:
        logger.error("safe_edit_message called without chat_id/message_id or inline_message_id")
        return False

    identifier = f"message {message_id} in chat {chat_id}" if chat_id and message_id else f"inline message {inline_message_id}"

    try:
        if inline_message_id:
            await bot.edit_message_text(
                text=text,
                inline_message_id=inline_message_id,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
            logger.debug(f"Successfully edited {identifier}")
        else:
            await bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
            logger.debug(f"Successfully edited {identifier}")
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
             logger.debug(f"{identifier} was not modified: {e}")
             return True
        elif "message to edit not found" in str(e) or "message can't be edited" in str(e) or "MESSAGE_ID_INVALID" in str(e) or "inline message ID is invalid" in str(e):
             logger.warning(f"Could not edit {identifier} (not found, too old, or invalid ID): {e}")
             # –î–ª—è inline —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–∑ safe_edit_message
             if chat_id:
                 try:
                     await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode, disable_web_page_preview=True)
                     logger.info(f"Sent new message to chat {chat_id} after edit failed for {identifier}")
                     return True # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ
                 except Exception as send_e:
                     logger.error(f"Failed to send new message after edit failed for {identifier} in chat {chat_id}: {send_e}")
                     return False
             else:
                 # –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ inline_message_id
                 return False
        else:
             logger.warning(f"Could not edit {identifier}: {e}.")
             return False
    except Exception as e:
        logger.error(f"Unexpected error editing {identifier}: {e}")
        return False

async def _get_user_medicines(user_id: int) -> list:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    medicines = await med_collection.find(
        {"added_by": user_id}
    ).sort("name_lower").to_list(length=None)
    return medicines

async def _show_user_medicine_list(user_id: int, chat_id: int, message_id: int, page: int = 1):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    medicines = await _get_user_medicines(user_id)
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é get_medicine_list_keyboard (–±–µ–∑ context)
    kb = get_medicine_list_keyboard(medicines, current_page=page)
    text = "–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:" if medicines else "–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø—É—Å—Ç."
    total_pages = (len(medicines) + MEDS_PER_PAGE - 1) // MEDS_PER_PAGE
    if total_pages > 1:
        text = f"–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):"
    await safe_edit_message(text, chat_id=chat_id, message_id=message_id, reply_markup=kb)


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω inline_message_id ---
async def show_main_menu_message(chat_id: int | None = None, message_id: int | None = None, inline_message_id: str | None = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ –∏–ª–∏ inline), –ø–æ–∫–∞–∑—ã–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = "üè† –î–æ–º–∞—à–Ω—è—è –∞–ø—Ç–µ—á–∫–∞\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º."
    kb = get_main_menu_keyboard()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ safe_edit_message ---
    await safe_edit_message(text, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id, reply_markup=kb)

async def create_db_indexes():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤ MongoDB."""
    try:
        # --- –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–ô –ò–ù–î–ï–ö–° ---
        # –°–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –û–î–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await med_collection.create_index([("added_by", 1), ("name_lower", 1)], unique=True)
        logger.info("Ensured unique compound index on ['added_by', 'name_lower'] (PER-USER uniqueness).")
        # -------------------------------

    except Exception as e:
        logger.error(f"Error creating/ensuring unique index: {e}")

    try:
        # –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await med_collection.create_index("added_by")
        logger.info("Ensured index on 'added_by'.")
    except Exception as e:
        logger.error(f"Error creating/ensuring index on 'added_by': {e}")

    try:
        # –ò–Ω–¥–µ–∫—Å –ø–æ –¥–∞—Ç–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await med_collection.create_index("exp_date")
        logger.info("Ensured index on 'exp_date'.")
    except Exception as e:
        logger.error(f"Error creating/ensuring index on 'exp_date': {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–µ—Å–ª–∏ –±—ã–ª–∏)
    try:
        index_info = await med_collection.index_information()
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π name_lower_1, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–Ω–æ–π
        if "name_lower_1" in index_info and "added_by_1_name_lower_1" in index_info:
            await med_collection.drop_index("name_lower_1")
            logger.info("Dropped old global unique index 'name_lower_1'.")
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π name_1
        if "name_1" in index_info:
             await med_collection.drop_index("name_1")
             logger.info("Dropped potentially old index 'name_1'.")
    except Exception as e:
        logger.warning(f"Could not check/drop old indexes: {e}")

    logger.info("MongoDB indexes check completed.")



# --- Barcode/Web Scraping Helpers ---

async def download_photo(message: types.Message) -> io.BytesIO | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ BytesIO."""
    if not message.photo:
        return None
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_content = await bot.download_file(file_info.file_path)
        return file_content # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO
    except Exception as e:
        logger.error(f"Failed to download photo: {e}")
        return None

def decode_barcode(image_bytes_io: io.BytesIO) -> str | None:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –≤ numpy –º–∞—Å—Å–∏–≤
        image_bytes_io.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ BytesIO
        file_bytes = np.asarray(bytearray(image_bytes_io.read()), dtype=np.uint8)
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenCV
        img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        if img is None:
            logger.warning("Failed to decode image with OpenCV.")
            return None

        logger.debug("Attempting barcode decoding on original image...")
        barcodes = pyzbar.decode(img)

        if barcodes:
            barcode_data = barcodes[0].data.decode('utf-8')
            logger.info(f"Barcode decoded (original): {barcode_data}")
            return barcode_data

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Å grayscale
        logger.debug("Attempting barcode decoding on grayscale image...")
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        barcodes_gray = pyzbar.decode(gray)
        if barcodes_gray:
            barcode_data = barcodes_gray[0].data.decode('utf-8')
            logger.info(f"Barcode decoded (grayscale): {barcode_data}")
            return barcode_data

        logger.info("Barcode not found in the image.")
        return None

    except Exception as e:
        logger.error(f"Error during barcode decoding: {e}")
        return None

async def fetch_barcode_info(barcode: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à—Ç—Ä–∏—Ö–∫–æ–¥–µ."""
    url = f"https://barcode-list.ru/barcode/RU/barcode-{barcode}/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA.htm"
    logger.info(f"Fetching barcode info from: {url}")
    try:
        async with aiohttp.ClientSession() as session:
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            async with session.get(url, headers=headers, timeout=15) as response:
                response.raise_for_status()
                html_content = await response.text()
                logger.info(f"Successfully fetched HTML for barcode {barcode}")
                return html_content
    except aiohttp.ClientError as e:
        logger.error(f"HTTP Client Error fetching barcode {barcode} info: {e}")
        return None
    except asyncio.TimeoutError:
        logger.error(f"Timeout fetching barcode {barcode} info from {url}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error fetching barcode {barcode} info: {e}")
        return None

def parse_barcode_html(html_content: str) -> list[str]:
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""
    names = []
    try:
        soup = BeautifulSoup(html_content, 'html.parser')
        table = soup.find('table', class_='randomBarcodes')
        if not table:
            logger.warning("Table 'randomBarcodes' not found in HTML.")
            if "–®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" in html_content:
                 logger.info("Barcode not found message detected on site.")
            return []

        rows = table.find_all('tr')
        if len(rows) <= 1:
             logger.warning("No data rows found in 'randomBarcodes' table.")
             return []

        for row in rows[1:]:
            cols = row.find_all('td')
            if len(cols) >= 3:
                name = cols[2].get_text(strip=True)
                if name:
                    names.append(name)

        unique_names = sorted(list(set(names)))
        logger.info(f"Parsed names from HTML: {unique_names}")
        return unique_names

    except Exception as e:
        logger.error(f"Error parsing barcode HTML: {e}")
        return []

def transliterate(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ RU <-> EN."""
    ru_en = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu',
        '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo', '–ñ': 'Zh',
        '–ó': 'Z', '–ò': 'I', '–ô': 'J', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O',
        '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts',
        '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu',
        '–Ø': 'Ya'
    }
    en_ru = {
        'a': '–∞', 'b': '–±', 'v': '–≤', 'g': '–≥', 'd': '–¥', 'e': '–µ', 'yo': '—ë', 'zh': '–∂',
        'z': '–∑', 'i': '–∏', 'j': '–π', 'k': '–∫', 'l': '–ª', 'm': '–º', 'n': '–Ω', 'o': '–æ',
        'p': '–ø', 'r': '—Ä', 's': '—Å', 't': '—Ç', 'u': '—É', 'f': '—Ñ', 'h': '—Ö', 'ts': '—Ü',
        'ch': '—á', 'sh': '—à', 'shch': '—â', 'y': '—ã', 'yu': '—é', 'ya': '—è',
        'A': '–ê', 'B': '–ë', 'V': '–í', 'G': '–ì', 'D': '–î', 'E': '–ï', 'Yo': '–Å', 'Zh': '–ñ',
        'Z': '–ó', 'I': '–ò', 'J': '–ô', 'K': '–ö', 'L': '–õ', 'M': '–ú', 'N': '–ù', 'O': '–û',
        'P': '–ü', 'R': '–†', 'S': '–°', 'T': '–¢', 'U': '–£', 'F': '–§', 'H': '–•', 'Ts': '–¶',
        'Ch': '–ß', 'Sh': '–®', 'Shch': '–©', 'Y': '–´', 'Yu': '–Æ', 'Ya': '–Ø'
    }

    result = ""
    is_ru = any(c in ru_en for c in text)
    is_en = any(c in en_ru for c in text)

    if is_ru and not is_en:
        dic = ru_en
    elif is_en and not is_ru:
        text = text.replace('shch', '—â').replace('Shch', '–©')
        text = text.replace('yo', '—ë').replace('Yo', '–Å')
        text = text.replace('zh', '–∂').replace('Zh', '–ñ')
        text = text.replace('ts', '—Ü').replace('Ts', '–¶')
        text = text.replace('ch', '—á').replace('Ch', '–ß')
        text = text.replace('sh', '—à').replace('Sh', '–®')
        text = text.replace('yu', '—é').replace('Yu', '–Æ')
        text = text.replace('ya', '—è').replace('Ya', '–Ø')
        dic = en_ru
    else:
        return text

    for char in text:
        result += dic.get(char, char)

    return result



# -----------------------------
# Command Handlers
# -----------------------------
@dp.message(Command("start"), StateFilter(None))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –¥–æ–º–∞—à–Ω–µ–π –∞–ø—Ç–µ—á–∫–µ.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
    kb = get_main_menu_keyboard()
    await message.answer(text, reply_markup=kb)

@dp.message(Command("help"), StateFilter(None))
async def help_command(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    help_text = """
    üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º "–î–æ–º–∞—à–Ω—è—è –∞–ø—Ç–µ—á–∫–∞"*

    –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤. –í–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:

    1Ô∏è‚É£ *–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ*
    –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add.
    –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –µ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º.
    –ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏ –∑–∞–º–µ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–∑–∏—Ä–æ–≤–∫—É).

    2Ô∏è‚É£ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫*
    –ù–∞–∂–º–∏—Ç–µ "üíä –°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /list.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏, —á—Ç–æ–±—ã –ª–∏—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    3Ô∏è‚É£ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏*
    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ.
    –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏.
    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.

    4Ô∏è‚É£ *–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ*
    –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏ –Ω–∞–∂–º–∏—Ç–µ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ".
    –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    5Ô∏è‚É£ *–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ @*
    –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ `@–∏–º—è_–≤–∞—à–µ–≥–æ_–±–æ—Ç–∞` –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.
    –ü—Ä–∏–º–µ—Ä: `@medicount_bot –∞—Å–ø–∏—Ä–∏–Ω`
    –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –≤–∞—à–µ–π –∞–ø—Ç–µ—á–∫–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ‚Äî –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.

    6Ô∏è‚É£ *–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è*
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ "‚ùå –û—Ç–º–µ–Ω–∞", –≤–≤–µ–¥–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /cancel.

    üìÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*
    –ë–æ—Ç —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–∫–æ—Ä–æ –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è.

    –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.answer(help_text, parse_mode="Markdown", disable_web_page_preview=True)

@dp.message(Command("list"), StateFilter(None))
async def list_medicines_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¢–ï–ö–£–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)."""
    user_id = message.from_user.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º, —Ç.–∫. —É –Ω–∞—Å –Ω–µ—Ç message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    medicines = await _get_user_medicines(user_id)
    kb = get_medicine_list_keyboard(medicines, current_page=1, context="list")
    text = "–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:" if medicines else "–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø—É—Å—Ç."
    total_pages = (len(medicines) + MEDS_PER_PAGE - 1) // MEDS_PER_PAGE
    if total_pages > 1:
        text = f"–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages}):"
    await message.answer(text, reply_markup=kb)


@dp.message(Command("add"), StateFilter(None))
async def add_medicine_command(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add."""
    sent_message = await message.answer(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ *—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —à—Ç—Ä–∏—Ö–∫–æ–¥–∞*:",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddMedicine.waiting_for_name)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(prompt_chat_id=sent_message.chat.id, prompt_message_id=sent_message.message_id)


@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞", StateFilter("*"))
async def cancel_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ FSM (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel –∏–ª–∏ —Ç–µ–∫—Å—Ç)."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        return

    logger.info(f"Cancelling state {current_state} via command/text for user {message.from_user.id}")
    user_data = await state.get_data()
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å, –æ–±—ã—á–Ω–æ–µ –∏–ª–∏ inline)
    message_id_to_edit = user_data.get("calendar_message_id") or user_data.get("prompt_message_id")
    inline_message_id_to_edit = user_data.get("inline_message_id")
    chat_id_to_edit = user_data.get("prompt_chat_id") # chat_id –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    await state.clear()

    try:
        await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/cancel –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞")
    except Exception as e:
        logger.warning(f"Could not delete user cancel message: {e}")

    if inline_message_id_to_edit:
        # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω—è–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å inline-—Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –Ω–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu_message(inline_message_id=inline_message_id_to_edit)
    elif chat_id_to_edit and message_id_to_edit:
        # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ FSM (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu_message(chat_id=chat_id_to_edit, message_id=message_id_to_edit)
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–º–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ /add), –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏–º –æ–± –æ—Ç–º–µ–Ω–µ
        # –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
         await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
         await start_handler(message) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

# --- FSM Handlers for Adding Medicine ---

@dp.message(AddMedicine.waiting_for_name, F.text)
async def process_medicine_name_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–º."""
    name = message.text.strip()
    user_id = message.from_user.id
    state_data = await state.get_data()
    prompt_msg_id = state_data.get("prompt_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")
    logger.debug(f"State (text name input): {state_data}")

    # --- –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø ID –°–û–û–ë–©–ï–ù–ò–Ø –ë–û–¢–ê ---
    if not prompt_chat_id or not prompt_msg_id:
        logger.error("process_medicine_name_text: Missing prompt_chat_id or prompt_message_id in state.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ /add")
        await state.clear()
        return
    # -----------------------------------------

    if not name:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
        await safe_edit_message(
            text="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞*:",
            chat_id=prompt_chat_id,
            message_id=prompt_msg_id,
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        try: await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as e: logger.warning(f"Could not delete user message (empty name): {e}")
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    name_lower = name.lower()
    existing_med_user = await med_collection.find_one({"name_lower": name_lower, "added_by": user_id})

    if existing_med_user:
        logger.info(f"Duplicate medicine name '{name}' entered by user {user_id}.")
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ---
        await safe_edit_message(
            text=f"‚ö†Ô∏è –ü—Ä–µ–ø–∞—Ä–∞—Ç '{existing_med_user['name']}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –∞–ø—Ç–µ—á–∫–µ.\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:", # –£–±—Ä–∞–ª "–∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ", —Ç.–∫. –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
            chat_id=prompt_chat_id,
            message_id=prompt_msg_id,
            reply_markup=get_cancel_keyboard(), # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞
            parse_mode="Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        )
        # --- –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º ---
        try: await message.delete()
        except Exception as e: logger.warning(f"Could not delete user message (duplicate name): {e}")
        # ----------------------------------------------------
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_name
        # ----------------------------------------------------

    # --- –ï—Å–ª–∏ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ ---
    await state.update_data(name=name, name_lower=name_lower)
    logger.debug(f"Setting state to AddMedicine.waiting_for_quantity")
    await state.set_state(AddMedicine.waiting_for_quantity)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–Ω—è—Ç—ã–º –∏–º–µ–Ω–µ–º
    try: await message.delete()
    except Exception as e: logger.warning(f"Could not delete user message (accepted name): {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    edit_successful = await safe_edit_message(
        text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 —à—Ç', '50 –º–ª', '1 –±–ª–∏—Å—Ç–µ—Ä'):",
        chat_id=prompt_chat_id,
        message_id=prompt_msg_id,
        reply_markup=get_cancel_keyboard()
    )
    if not edit_successful: # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å
        logger.warning("Failed to edit prompt message to ask for quantity. Sending new.")
        new_msg = await bot.send_message(prompt_chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_cancel_keyboard())
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ state –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        await state.update_data(prompt_message_id=new_msg.message_id)
    # ----------------------------------------------------



@dp.message(AddMedicine.waiting_for_name, F.photo)
async def process_medicine_name_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç."""
    user_id = message.from_user.id
    state_data = await state.get_data()
    prompt_msg_id = state_data.get("prompt_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")
    logger.debug(f"State (photo name input): {state_data}")

    if not prompt_chat_id or not prompt_msg_id:
        logger.error("Cannot find prompt message info in state for AddMedicine.waiting_for_name (photo)")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ (/add).")
        await state.clear()
        return

    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"Could not delete user photo message: {e}")

    async with ChatActionSender.typing(bot=bot, chat_id=prompt_chat_id):
        await safe_edit_message("üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ, —Ä–∞—Å–ø–æ–∑–Ω–∞—é —à—Ç—Ä–∏—Ö–∫–æ–¥...", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard())
        photo_bytes_io = await download_photo(message)
        if not photo_bytes_io:
             await safe_edit_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard())
             return
        barcode = decode_barcode(photo_bytes_io)
        photo_bytes_io.close()
        if not barcode:
            await safe_edit_message("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard())
            return

        await safe_edit_message(f"üîç –®—Ç—Ä–∏—Ö–∫–æ–¥: `{barcode}`. –ò—â—É –Ω–∞ barcode-list.ru...", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard(), parse_mode="Markdown")
        html_content = await fetch_barcode_info(barcode)
        if not html_content:
            await safe_edit_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –¥–ª—è `{barcode}`. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard(), parse_mode="Markdown")
            return
        parsed_names = parse_barcode_html(html_content)
        if not parsed_names:
             await safe_edit_message(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è `{barcode}`. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:", chat_id=prompt_chat_id, message_id=prompt_msg_id, reply_markup=get_cancel_keyboard(), parse_mode="Markdown")
             return

        shortest_name = min(parsed_names, key=len)
        logger.info(f"Shortest name found: '{shortest_name}'")
        name_lower = shortest_name.lower()
        existing_med_user = await med_collection.find_one({"name_lower": name_lower, "added_by": user_id})

        if existing_med_user:
            logger.info(f"Medicine '{shortest_name}' already exists for user {user_id}. Offering update.")
            await safe_edit_message(
                text=f"‚ö†Ô∏è –õ–µ–∫–∞—Ä—Å—Ç–≤–æ *{shortest_name}* —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –∞–ø—Ç–µ—á–∫–µ.\n\n"
                     f"–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)?",
                chat_id=prompt_chat_id,
                message_id=prompt_msg_id,
                reply_markup=get_confirm_barcode_update_keyboard(shortest_name),
                parse_mode="Markdown"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º
            await state.update_data(prompt_chat_id=prompt_chat_id, prompt_message_id=prompt_msg_id)
        else:
            logger.info(f"Automatically selected unique shortest name: '{shortest_name}'")
            await state.update_data(name=shortest_name, name_lower=name_lower)
            logger.debug(f"Setting state to AddMedicine.waiting_for_quantity")
            await state.set_state(AddMedicine.waiting_for_quantity)

            edit_successful = await safe_edit_message(
                text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É: *{shortest_name}*\n\n"
                     f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 —à—Ç', '50 –º–ª', '1 –±–ª–∏—Å—Ç–µ—Ä'):",
                chat_id=prompt_chat_id,
                message_id=prompt_msg_id,
                reply_markup=get_cancel_keyboard(),
                parse_mode="Markdown"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ state, –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not edit_successful:
                 new_msg = await bot.send_message(prompt_chat_id, f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É: *{shortest_name}*\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=get_cancel_keyboard(), parse_mode="Markdown")
                 await state.update_data(prompt_chat_id=new_msg.chat.id, prompt_message_id=new_msg.message_id)
            else:
                 await state.update_data(prompt_chat_id=prompt_chat_id, prompt_message_id=prompt_msg_id)



@dp.message(AddMedicine.waiting_for_quantity, F.text)
async def process_medicine_quantity(message: types.Message, state: FSMContext):
    logger.debug(f"Entered process_medicine_quantity. Current state: {await state.get_state()}")
    quantity_str = message.text.strip()
    logger.debug(f"Received quantity: '{quantity_str}'")
    state_data = await state.get_data()
    prompt_msg_id = state_data.get("prompt_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")
    logger.debug(f"State data before processing quantity: {state_data}")

    if not quantity_str:
         await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
         return

    await state.update_data(quantity=quantity_str)
    logger.debug(f"Quantity '{quantity_str}' saved to state.")
    logger.debug(f"Setting state to AddMedicine.waiting_for_notes")
    await state.set_state(AddMedicine.waiting_for_notes)

    try:
        await message.delete()
    except Exception as e: logger.warning(f"Could not delete user message: {e}")

    if prompt_chat_id and prompt_msg_id:
        logger.debug(f"Attempting to edit message {prompt_msg_id} in chat {prompt_chat_id} to ask for notes.")
        edit_successful = await safe_edit_message(
            text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–¥–æ–∑–∏—Ä–æ–≤–∫–∞, —Å–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, '-' –µ—Å–ª–∏ –Ω–µ—Ç):",
            chat_id=prompt_chat_id,
            message_id=prompt_msg_id,
            reply_markup=get_cancel_keyboard()
        )
        if not edit_successful:
             logger.error("Failed to edit or send new prompt message in AddMedicine.waiting_for_quantity after state change.")
             new_msg = await bot.send_message(prompt_chat_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:", reply_markup=get_cancel_keyboard())
             await state.update_data(prompt_chat_id=new_msg.chat.id, prompt_message_id=new_msg.message_id)
    else:
        logger.error("Cannot find prompt message info in state for AddMedicine.waiting_for_quantity")
        new_msg = await bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:", reply_markup=get_cancel_keyboard())
        await state.update_data(prompt_chat_id=new_msg.chat.id, prompt_message_id=new_msg.message_id)



@dp.message(AddMedicine.waiting_for_notes, F.text)
async def process_medicine_notes(message: types.Message, state: FSMContext):
    notes = message.text.strip()
    state_data = await state.get_data()
    prompt_msg_id = state_data.get("prompt_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")

    if not notes:
         await message.reply("–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã '-' –∏–ª–∏ '–Ω–µ—Ç':")
         return

    await state.update_data(notes=notes)
    await state.set_state(AddMedicine.waiting_for_exp_date)
    try:
        await message.delete()
    except Exception as e: logger.warning(f"Could not delete user message: {e}")

    today = datetime.date.today()
    calendar_markup = await create_calendar(today.year, today.month)

    if prompt_chat_id and prompt_msg_id:
        edit_successful = await safe_edit_message(
            text="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            chat_id=prompt_chat_id,
            message_id=prompt_msg_id,
            reply_markup=calendar_markup
        )
        if edit_successful:
             # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º calendar_message_id ---
             await state.update_data(calendar_message_id=prompt_msg_id, calendar_year=today.year, calendar_month=today.month)
        else:
             new_cal_msg = await bot.send_message(prompt_chat_id, "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:", reply_markup=calendar_markup)
             # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º prompt_message_id –∏ calendar_message_id ---
             await state.update_data(prompt_chat_id=new_cal_msg.chat.id, prompt_message_id=new_cal_msg.message_id, calendar_message_id=new_cal_msg.message_id, calendar_year=today.year, calendar_month=today.month)
    else:
        logger.error("Cannot find prompt message info in state for AddMedicine.waiting_for_notes")
        new_cal_msg = await bot.send_message(message.chat.id, "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:", reply_markup=calendar_markup)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ ID ---
        await state.update_data(prompt_chat_id=new_cal_msg.chat.id, prompt_message_id=new_cal_msg.message_id, calendar_message_id=new_cal_msg.message_id, calendar_year=today.year, calendar_month=today.month)


@dp.message(AddMedicine.waiting_for_exp_date, F.text)
async def process_medicine_exp_date_text(message: types.Message, state: FSMContext):
    exp_date_str = message.text.strip()
    user_id = message.from_user.id
    state_data = await state.get_data()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º calendar_message_id ---
    calendar_msg_id = state_data.get("calendar_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")

    try:
        exp_date_obj = datetime.datetime.strptime(exp_date_str, "%Y-%m-%d").date()
        if exp_date_obj < datetime.date.today():
             await message.reply("–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
             return
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    await state.update_data(exp_date=exp_date_obj.isoformat())

    try:
        await message.delete()
    except Exception as e: logger.warning(f"Could not delete user message with date: {e}")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID ---
    await _save_new_medicine(user_id, state, prompt_chat_id, calendar_msg_id)




async def _save_new_medicine(user_id: int, state: FSMContext, chat_id: int | None, message_id: int | None):
    user_data = await state.get_data()
    name = user_data.get('name')
    name_lower = user_data.get('name_lower')
    quantity = user_data.get('quantity')
    notes = user_data.get('notes')
    exp_date_iso = user_data.get('exp_date')

    if not all([name, name_lower, quantity, notes, exp_date_iso]):
        logger.error("Incomplete medicine data before insertion: {}", user_data)
        await state.clear()
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ."
        if chat_id and message_id:
            await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id, reply_markup=get_main_menu_keyboard())
        # else: # –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º chat_id
        #     await bot.send_message(user_id, error_text, reply_markup=get_main_menu_keyboard())
        return

    med_doc = {
        "name": name, "name_lower": name_lower, "quantity": quantity,
        "notes": notes, "exp_date": exp_date_iso, "added_by": user_id
    }

    try:
        await med_collection.insert_one(med_doc)
        logger.info("Added medicine via FSM for user {}: {}", user_id, med_doc['name'])
        await state.clear()
        if chat_id and message_id:
            await _show_user_medicine_list(user_id, chat_id, message_id, page=1)
        # else:
        #      await bot.send_message(user_id, f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
        #                            reply_markup=get_main_menu_keyboard())
    except DuplicateKeyError:
        logger.warning("Duplicate key error on insert for user {}: attempt to add '{}'", user_id, name)
        await state.clear()
        error_text = f"–û—à–∏–±–∫–∞: –ü—Ä–µ–ø–∞—Ä–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –∞–ø—Ç–µ—á–∫–µ."
        if chat_id and message_id:
            await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id, reply_markup=get_main_menu_keyboard())
        # else:
        #     await bot.send_message(user_id, error_text, reply_markup=get_main_menu_keyboard())
    except Exception as e:
         logger.error("Failed to insert medicine for user {}: {}. Data: {}", user_id, e, med_doc)
         await state.clear()
         error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
         if chat_id and message_id:
             await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id, reply_markup=get_main_menu_keyboard())
         # else:
         #      await bot.send_message(user_id, error_text, reply_markup=get_main_menu_keyboard())


# --- FSM Handlers for Editing Medicine ---

@dp.message(EditMedicine.waiting_for_new_value, F.text)
async def process_new_value_text(message: types.Message, state: FSMContext):
    new_value_str = message.text.strip()
    user_id = message.from_user.id
    state_data = await state.get_data()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º med_id –∏ med_name –∏–∑ state ---
    med_id = state_data.get("med_id")
    med_name_original = state_data.get("med_name") # –ò–º—è –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ª–æ–≥–æ–≤
    field_to_edit = state_data.get("field_to_edit")
    prompt_msg_id = state_data.get("prompt_message_id")
    prompt_chat_id = state_data.get("prompt_chat_id")
    calendar_msg_id = state_data.get("calendar_message_id")
    inline_msg_id = state_data.get("inline_message_id")

    message_id_to_restore = calendar_msg_id or prompt_msg_id
    chat_id_to_restore = prompt_chat_id

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ med_id ---
    if not all([med_id, med_name_original, field_to_edit]) or not ( (chat_id_to_restore and message_id_to_restore) or inline_msg_id):
        logger.error("State data missing (med_id/name/field or IDs) in EditMedicine state: {}", state_data)
        await state.clear()
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        if inline_msg_id: await show_main_menu_message(inline_message_id=inline_msg_id)
        elif chat_id_to_restore and message_id_to_restore: await show_main_menu_message(chat_id=chat_id_to_restore, message_id=message_id_to_restore)
        return

    update_data = {}
    error_message = None
    validated_value = None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if field_to_edit == "name":
         if not new_value_str: error_message = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
         else:
             new_value_lower = new_value_str.lower()
             # –ò—â–µ–º –¥—Ä—É–≥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
             existing_med_user = await med_collection.find_one({
                 "name_lower": new_value_lower,
                 "added_by": user_id,
                 # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ ---
                 "_id": {"$ne": ObjectId(med_id)}
             })
             if existing_med_user:
                 error_message = f"–ü—Ä–µ–ø–∞—Ä–∞—Ç '{new_value_str}' —É–∂–µ –µ—Å—Ç—å –≤ –∞–ø—Ç–µ—á–∫–µ."
             else:
                 update_data["name"] = new_value_str; update_data["name_lower"] = new_value_lower; validated_value = new_value_str
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (quantity, notes, exp_date - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    elif field_to_edit == "quantity":
        if not new_value_str: error_message = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        else: update_data[field_to_edit] = new_value_str; validated_value = new_value_str
    elif field_to_edit == "notes":
         if not new_value_str: error_message = "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (–≤–≤–µ–¥–∏—Ç–µ '-')."
         else: update_data[field_to_edit] = new_value_str; validated_value = new_value_str
    elif field_to_edit == "exp_date":
        try:
            dt = datetime.datetime.strptime(new_value_str, "%Y-%m-%d").date()
            if dt < datetime.date.today(): error_message = "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º."
            else: update_data[field_to_edit] = dt.isoformat(); validated_value = dt
        except ValueError: error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î."

    if error_message:
        await message.reply(f"{error_message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    try:
        await message.delete()
    except Exception as e: logger.warning(f"Could not delete user message with new value: {e}")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º med_id –≤ _save_edited_medicine ---
    await _save_edited_medicine(
        user_id=user_id, med_id=med_id, field_to_edit=field_to_edit,
        new_value=validated_value, update_data_dict=update_data, state=state,
        chat_id=chat_id_to_restore,
        message_id=message_id_to_restore,
        inline_message_id=inline_msg_id
    )


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω inline_message_id ---
async def _save_edited_medicine(user_id: int, med_id: str, field_to_edit: str, new_value: any, update_data_dict: dict, state: FSMContext,
                                chat_id: int | None, message_id: int | None, inline_message_id: str | None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç view_medicine_details —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID."""
    try: object_id = ObjectId(med_id)
    except Exception as e: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ID ...
        logger.error(f"Invalid ObjectId received in _save_edited_medicine: {med_id}. Error: {e}")
        await state.clear(); # ... —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ...
        return

    find_query = {"_id": object_id, "added_by": user_id}
    current_med = await med_collection.find_one(find_query, {"name": 1})
    med_name_original = current_med.get("name", "???" if current_med else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    if field_to_edit == "exp_date" and isinstance(new_value, datetime.date): update_data_dict[field_to_edit] = new_value.isoformat()
    elif field_to_edit not in update_data_dict and new_value is not None: update_data_dict[field_to_edit] = new_value

    if not update_data_dict: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ...
        logger.warning("No data to update for medicine ID '{}', user {}", med_id, user_id)
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
        await view_medicine_details(med_id, user_id, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id)
        return

    result = await med_collection.update_one(find_query, {"$set": update_data_dict})
    await state.clear()
    new_name_after_update = update_data_dict.get("name", med_name_original)

    if result.matched_count == 0:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏) ...
        logger.warning(f"Medicine ID '{med_id}' for user {user_id} not found for update.")
        error_text = "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if inline_message_id:
            await safe_edit_message(error_text, inline_message_id=inline_message_id)
            await asyncio.sleep(2); await show_main_menu_message(inline_message_id=inline_message_id)
        elif chat_id and message_id:
            await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id)
            await asyncio.sleep(2); await _show_user_medicine_list(user_id, chat_id, message_id, page=1)
    elif result.modified_count:
        # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞) ...
        logger.info("Updated medicine ID '{}' (Name: '{}'), field '{}' for user {}. New name: '{}'", med_id, med_name_original, field_to_edit, user_id, new_name_after_update)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
        await view_medicine_details(med_id, user_id, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id)
    else:
        # ... (–ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ) ...
        logger.info("Medicine ID '{}' (Name: '{}') for user {} matched but not modified.", med_id, med_name_original, user_id)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
        await view_medicine_details(med_id, user_id, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id)




# --- Inline Query Handler ---
@dp.inline_query()
async def inline_search_handler(inline_query: InlineQuery):
    query = inline_query.query.strip()
    user_id = inline_query.from_user.id
    results = []
    offset = int(inline_query.offset) if inline_query.offset else 0
    limit = 20

    if len(query) < 1:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–≤–µ–¥–µ–Ω–∏–µ switch_pm_text ---
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..." –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π–¥–µ—Ç –≤ –õ–° —Å –±–æ—Ç–æ–º
        # –∏ –±–æ—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start inline_help
        # –¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–ø–µ—Ü. —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å /start —Ö–µ–Ω–¥–ª–µ—Ä.
        await inline_query.answer([], cache_time=5, is_personal=True,
                                  switch_pm_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...",
                                  switch_pm_parameter="inline_help")
        return

    logger.info(f"Inline query from user {user_id}: '{query}' (Offset: {offset})")

    # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    query_lower = query.lower()
    translit_query_lower = transliterate(query_lower)
    search_conditions = []
    regex_options = "i"
    search_conditions.append({"name_lower": {"$regex": f"{re.escape(query_lower)}", "$options": regex_options}})
    if translit_query_lower != query_lower:
        search_conditions.append({"name_lower": {"$regex": f"{re.escape(translit_query_lower)}", "$options": regex_options}})
    db_query = {"added_by": user_id}
    if len(search_conditions) > 1: db_query["$or"] = search_conditions
    elif search_conditions: db_query.update(search_conditions[0])
    else:
        await inline_query.answer([], cache_time=5, is_personal=True)
        return

    try:
        found_medicines_cursor = med_collection.find(db_query).sort("name_lower").skip(offset).limit(limit)
        found_medicines = await found_medicines_cursor.to_list(length=limit)

        for med in found_medicines:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º item_id ---
            med_id = str(med['_id'])
            result_article_id = f"med_{user_id}_{med_id}" # –°—Ç–∞–±–∏–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            med_name = med['name']
            med_quantity = med.get('quantity', 'N/A')
            med_exp = med.get('exp_date', 'N/A')
            med_notes = med.get('notes', '-')

            message_text = (
                f"üíä *{med_name}*\n\n"
                f"‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {med_quantity}\n"
                f"‚ñ´Ô∏è –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: `{med_exp}`\n"
                f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {med_notes}"
            )

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç item_id ---
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úèÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å / –ò–∑–º–µ–Ω–∏—Ç—å",
                    callback_data=MedAction(action="view", item_id=med_id, context="inline_view").pack()
                )]
            ])

            results.append(
                InlineQueryResultArticle(
                    id=result_article_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID
                    title=med_name,
                    description=f"–ö–æ–ª-–≤–æ: {med_quantity} | –°—Ä–æ–∫: {med_exp}",
                    input_message_content=InputTextMessageContent(
                        message_text=message_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    ),
                    reply_markup=inline_kb
                )
            )

        next_offset = str(offset + limit) if len(found_medicines) == limit else ""
        await inline_query.answer(
            results=results, cache_time=5, is_personal=True, next_offset=next_offset
        )

    except Exception as e:
        logger.error(f"Error processing inline query for user {user_id}: {e}")
        await inline_query.answer([], cache_time=1, is_personal=True, switch_pm_text="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç?", switch_pm_parameter="error")


# -----------------------------
# Callback Query Handlers
# -----------------------------

@dp.callback_query(MedAction.filter(F.action == "hide_inline_info"), StateFilter(None))
async def hide_inline_info_callback(callback: types.CallbackQuery):
    """–°–∫—Ä—ã–≤–∞–µ—Ç (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞ —Å–∏–º–≤–æ–ª) —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ inline-—Ä–µ–∂–∏–º."""
    if callback.inline_message_id:
        logger.info(f"Hiding inline message {callback.inline_message_id} by user {callback.from_user.id}")
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–º–≤–æ–ª –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        edit_success = await safe_edit_message(
            text="‚ö†Ô∏è", # –ü—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª
            inline_message_id=callback.inline_message_id,
            reply_markup=None, # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode=None # –ù–µ –Ω—É–∂–µ–Ω parse_mode –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        )
        # ----------------------
        if edit_success:
            await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞.")
        else:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", show_alert=True)
    else:
        logger.warning(f"hide_inline_info callback received without inline_message_id from user {callback.from_user.id}")
        await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ–∏—Å–∫–∞.", show_alert=True)

# --- Main Menu and List Navigation ---
@dp.callback_query(MedAction.filter(F.action == "list"), StateFilter(None))
async def list_medicines_callback(callback: types.CallbackQuery, callback_data: MedAction):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    user_id = callback.from_user.id
    page = callback_data.page or 1
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–±—ç–∫ –ø—Ä–∏—à–µ–ª –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message:
        await _show_user_medicine_list(user_id, callback.message.chat.id, callback.message.message_id, page=page)
        await callback.answer()
    else:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)


@dp.callback_query(MedAction.filter(F.action == "page"), StateFilter(None))
async def handle_page_callback(callback: types.CallbackQuery, callback_data: MedAction):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞."""
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if callback.message:
        user_id = callback.from_user.id
        page = callback_data.page or 1
        await _show_user_medicine_list(user_id, callback.message.chat.id, callback.message.message_id, page=page)
        await callback.answer()
    else:
        logger.warning("page callback received without message")
        await callback.answer("–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–¥–µ—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)


@dp.callback_query(F.data == "back_to_main_menu", StateFilter(None))
async def back_to_menu_callback_from_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ò–ó –°–ü–ò–°–ö–ê –õ–ï–ö–ê–†–°–¢–í."""
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if callback.message:
        await show_main_menu_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.answer()
    else:
        logger.warning("back_to_main_menu callback received without message")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)


@dp.callback_query(MedAction.filter(F.action == "back" and F.context == "list"), StateFilter(None))
async def back_to_list_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –ª–µ–∫–∞—Ä—Å—Ç–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)."""
    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if callback.message:
        user_id = callback.from_user.id
        await _show_user_medicine_list(user_id, callback.message.chat.id, callback.message.message_id, page=1)
        await callback.answer()
    else:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

# --- Add Medicine Flow ---
@dp.callback_query(MedAction.filter(F.action == "add"), StateFilter(None))
async def add_medicine_callback_start(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not callback.message:
        await callback.answer("–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º.", show_alert=True)
        return

    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ...")
    chat_id=callback.message.chat.id; message_id=callback.message.message_id
    await safe_edit_message(
        text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞*:",
        chat_id=chat_id, message_id=message_id, parse_mode="Markdown", reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddMedicine.waiting_for_name)
    await state.update_data(prompt_chat_id=chat_id, prompt_message_id=message_id)


@dp.callback_query(MedAction.filter(F.action == "confirm_barcode_update"), AddMedicine.waiting_for_name)
async def handle_confirm_barcode_update(callback: types.CallbackQuery, callback_data: MedAction, state: FSMContext):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ callback –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –¥–µ—Ç–∞–ª–∏."""
    logger.debug(f"Entered handle_confirm_barcode_update for user {callback.from_user.id}")
    if not callback.message:
        logger.warning("handle_confirm_barcode_update called without callback.message")
        return await callback.answer("–û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)

    # –ß–∏—Ç–∞–µ–º item_name –∏–∑ callback_data
    med_name = callback_data.item_name
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–ª–±—ç–∫–∞
    prompt_chat_id = callback.message.chat.id
    prompt_message_id = callback.message.message_id
    logger.debug(f"Callback data item_name: {med_name}")
    logger.debug(f"Context: chat_id={prompt_chat_id}, message_id={prompt_message_id}")

    if not med_name: # –ü—Ä–æ–≤–µ—Ä–∫–∞ med_name (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        logger.error(f"Confirm barcode update missing data: Name is None. ChatID: {prompt_chat_id}, MsgID: {prompt_message_id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–µ—Ç –∏–º–µ–Ω–∏)!", show_alert=True)
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await show_main_menu_message(chat_id=prompt_chat_id, message_id=prompt_message_id)
        return

    # –ù–∞—Ö–æ–¥–∏–º ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ –∏–º–µ–Ω–∏
    logger.debug(f"Searching for med with name_lower: '{med_name.lower()}' for user {user_id}")
    existing_med = await med_collection.find_one({"name_lower": med_name.lower(), "added_by": user_id})
    if not existing_med:
        logger.error(f"Cannot find med '{med_name}' for user {user_id} to get ID.")
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{med_name}'.", show_alert=True)
        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é
        # –í–µ—Ä–Ω–µ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        await state.clear()
        await show_main_menu_message(chat_id=prompt_chat_id, message_id=prompt_message_id)
        return

    med_id = str(existing_med['_id'])
    logger.info(f"Found med_id: {med_id} for name: '{med_name}'. Showing details view instead of editing quantity.")

    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–≤—ã—Ö–æ–¥–∏–º –∏–∑ AddMedicine.waiting_for_name)
    await state.clear()

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ ID
    # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∏ message_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–±—ç–∫–∞
    await view_medicine_details(
        med_id=med_id,
        user_id=user_id,
        chat_id=prompt_chat_id,
        message_id=prompt_message_id
        # is_inline –∑–¥–µ—Å—å —è–≤–Ω–æ False, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å callback.message
    )
    # --------------------------

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()

@dp.callback_query(MedAction.filter(F.action == "add_different_barcode"), AddMedicine.waiting_for_name)
async def handle_add_different_barcode(callback: types.CallbackQuery, state: FSMContext):
    # –õ–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)
    state_data = await state.get_data()
    prompt_chat_id = state_data.get("prompt_chat_id")
    prompt_message_id = state_data.get("prompt_message_id")
    if not all([prompt_chat_id, prompt_message_id]):
         logger.error(f"Add different barcode missing prompt data.")
         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
         await state.clear()
         await show_main_menu_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
         return
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    await safe_edit_message(
        text="‚ûï –•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.\n\n"
             "–í–≤–µ–¥–∏—Ç–µ *—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ* –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —à—Ç—Ä–∏—Ö–∫–æ–¥–∞*:",
        chat_id=prompt_chat_id, message_id=prompt_message_id,
        parse_mode="Markdown", reply_markup=get_cancel_keyboard())
    await state.update_data(prompt_chat_id=prompt_chat_id, prompt_message_id=prompt_message_id)



# --- View Medicine Details ---
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã inline_message_id –∏ context ---
async def view_medicine_details(med_id: str, user_id: int,
                                chat_id: int | None = None, message_id: int | None = None,
                                inline_message_id: str | None = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ ID (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏–ª–∏ inline —Å–æ–æ–±—â–µ–Ω–∏—è)."""
    is_inline = bool(inline_message_id) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, inline —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç

    if not (chat_id and message_id) and not inline_message_id:
        logger.error("view_medicine_details called without chat_id/message_id or inline_message_id")
        return

    try:
        object_id = ObjectId(med_id)
    except Exception as e:
        logger.error(f"Invalid ObjectId received in view_medicine_details: {med_id}. Error: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞)."
        await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id)
        return

    medicine = await med_collection.find_one({"_id": object_id, "added_by": user_id})

    if not medicine:
        logger.warning(f"Medicine ID '{med_id}' for user {user_id} not found when trying to view details.")
        error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ."
        if is_inline:
             # –î–ª—è inline –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –º–µ–Ω—é
             await safe_edit_message(error_text, inline_message_id=inline_message_id, reply_markup=get_main_menu_keyboard())
        elif chat_id and message_id:
             # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
             await safe_edit_message(error_text, chat_id=chat_id, message_id=message_id)
             await asyncio.sleep(2)
             await _show_user_medicine_list(user_id, chat_id, message_id, page=1)
        return

    med_name = medicine['name']
    text = (
        f"–ü—Ä–µ–ø–∞—Ä–∞—Ç: *{med_name}*\n\n"
        f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {medicine['quantity']}\n"
        f"*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:* {medicine.get('notes', '-')}\n"
        f"–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: `{medicine.get('exp_date', '–ù–µ —É–∫–∞–∑–∞–Ω')}`"
    )
    # –ü–µ—Ä–µ–¥–∞–µ–º is_inline –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = get_medicine_details_keyboard(med_id, is_inline=is_inline)
    await safe_edit_message(text, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id, reply_markup=kb, parse_mode="Markdown")


# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∏ inline —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.callback_query(MedAction.filter(F.action == "view"), StateFilter(None))
async def view_medicine_callback(callback: types.CallbackQuery, callback_data: MedAction):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ inline)."""
    user_id = callback.from_user.id
    med_id = callback_data.item_id

    if not med_id: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ med_id ...
        logger.warning("View action called without item_id for user {}", user_id)
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.", show_alert=True); return
    try: ObjectId(med_id) # –ü—Ä–æ–≤–µ—Ä–∫–∞
    except Exception: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ med_id ...
        logger.warning(f"View action called with invalid item_id '{med_id}' for user {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.", show_alert=True); return

    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é view_medicine_details, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω—É–∂–Ω—ã–µ ID
    if callback.inline_message_id:
        await view_medicine_details(med_id, user_id, inline_message_id=callback.inline_message_id)
    elif callback.message:
        await view_medicine_details(med_id, user_id, chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    else: # –ù–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–∞—Ç—å
        logger.error(f"View callback without message or inline_message_id. Data: {callback_data}")
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)

    await callback.answer()


# --- Delete Medicine Flow ---
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∏ inline —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.callback_query(MedAction.filter(F.action == "delete"), StateFilter(None))
async def delete_medicine_request(callback: types.CallbackQuery, callback_data: MedAction):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ inline)."""
    med_id = callback_data.item_id
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id if callback.message else None
    message_id = callback.message.message_id if callback.message else None
    inline_message_id = callback.inline_message_id

    if not med_id: return await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.", show_alert=True)
    if not ( (chat_id and message_id) or inline_message_id ): # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è ...
        logger.error(f"Missing ID for delete request. C/M ID: {chat_id}/{message_id}, Inline ID: {inline_message_id}")
        return await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        object_id = ObjectId(med_id)
        medicine = await med_collection.find_one({"_id": object_id, "added_by": user_id}, {"name": 1})
        if not medicine: raise ValueError("Medicine not found")
        med_name = medicine.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ")
    except Exception as e: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ ...
        logger.error(f"Failed to get medicine name for delete confirmation. ID: {med_id}, User: {user_id}, Error: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True); return

    text = f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç *{med_name}*?"
    kb = get_confirm_delete_keyboard(med_id) # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await safe_edit_message(text, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id, reply_markup=kb, parse_mode="Markdown")
    await callback.answer()



# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∏ inline —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.callback_query(MedAction.filter( (F.action == "confirm_delete") & (F.confirm == True) ), StateFilter(None))
async def delete_medicine_confirm(callback: types.CallbackQuery, callback_data: MedAction):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ inline)."""
    user_id = callback.from_user.id
    med_id = callback_data.item_id
    chat_id = callback.message.chat.id if callback.message else None
    message_id = callback.message.message_id if callback.message else None
    inline_message_id = callback.inline_message_id

    # ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ med_id –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è) ...
    if not med_id: return await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.", show_alert=True)
    if not ( (chat_id and message_id) or inline_message_id ):
         logger.error(f"Missing ID for confirm delete. C/M ID: {chat_id}/{message_id}, Inline ID: {inline_message_id}")
         return await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)

    # ... (–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º) ...
    try: # ... –ø–æ–ª—É—á–µ–Ω–∏–µ med_name ...
        object_id = ObjectId(med_id)
        med_to_delete = await med_collection.find_one({"_id": object_id, "added_by": user_id}, {"name": 1})
        med_name = med_to_delete.get("name", "???" if med_to_delete else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
         logger.error(f"Failed to get name before delete. ID: {med_id}, User: {user_id}, Error: {e}")
         med_name = "???" ; object_id = None

    # ... (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î) ...
    deleted_count = 0
    if object_id:
        result = await med_collection.delete_one({"_id": object_id, "added_by": user_id})
        deleted_count = result.deleted_count

    if deleted_count:
        logger.info("Confirmed delete medicine ID '{}' (Name: '{}') for user {}", med_id, med_name, user_id)
        await callback.answer("–ü—Ä–µ–ø–∞—Ä–∞—Ç —É–¥–∞–ª–µ–Ω.", show_alert=False)

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        if inline_message_id:
            # –î–ª—è inline-—Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ —Å–∏–º–≤–æ–ª "–∫–æ—Ä–∑–∏–Ω–∞"
            logger.info(f"Updating inline message {inline_message_id} to 'üóëÔ∏è' after deleting med {med_id}")
            await safe_edit_message(
                text="üóëÔ∏è", # –ü—Ä–æ—Å—Ç–æ —Å–∏–º–≤–æ–ª –∫–æ—Ä–∑–∏–Ω—ã
                inline_message_id=inline_message_id,
                reply_markup=None, # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                parse_mode=None
            )
        # ----------------------
        elif chat_id and message_id:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await _show_user_medicine_list(user_id, chat_id, message_id, page=1)
        else:
            logger.warning("Deleted medicine but no message/inline_message_id found.")
    else:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è - –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ) ...
        logger.warning(f"Medicine ID '{med_id}' (Name: '{med_name}') for user {user_id} not found for confirmed deletion (or invalid ID).")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        if inline_message_id:
             await view_medicine_details(med_id, user_id, inline_message_id=inline_message_id) # –ü–æ–∫–∞–∂–µ—Ç –æ—à–∏–±–∫—É "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        elif chat_id and message_id:
            await _show_user_medicine_list(user_id, chat_id, message_id, page=1)



# --- Edit Medicine Flow ---
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö –∏ inline —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.callback_query(MedAction.filter(F.action == "edit"), StateFilter(None))
async def edit_medicine_field_start(callback: types.CallbackQuery, callback_data: MedAction, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è (–∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ inline)."""
    user_id = callback.from_user.id
    med_id = callback_data.item_id
    field = callback_data.field
    chat_id = callback.message.chat.id if callback.message else None
    message_id = callback.message.message_id if callback.message else None
    inline_message_id = callback.inline_message_id

    if not med_id or not field: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
         logger.error(f"Missing med_id or field in edit callback: {callback_data}"); await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True); return
    if not ( (chat_id and message_id) or inline_message_id ): # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ID ...
         logger.error(f"Missing message/inline ID for edit request. C/M ID: {chat_id}/{message_id}, Inline ID: {inline_message_id}"); await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!", show_alert=True); return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ ID
    try:
        object_id = ObjectId(med_id)
        medicine = await med_collection.find_one({"_id": object_id, "added_by": user_id}, {"name": 1})
        if not medicine: raise ValueError("Medicine not found")
        med_name = medicine.get("name", "???")
    except Exception as e: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ ...
        logger.error(f"Failed to get medicine name for edit start. ID: {med_id}, User: {user_id}, Error: {e}"); await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!", show_alert=True); return

    field_rus_map = { "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "quantity": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "notes": "–ø—Ä–∏–º–µ—á–∞–Ω–∏—è", "exp_date": "—Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏" }
    prompt_text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '{med_name}'.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_rus_map.get(field, field)}':"

    reply_markup = get_cancel_keyboard()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ state
    state_update_data = {
        "med_id": med_id, "med_name": med_name, "field_to_edit": field, "user_id": user_id,
        "prompt_chat_id": chat_id, "prompt_message_id": message_id, "inline_message_id": inline_message_id,
        "calendar_message_id": message_id if message_id else inline_message_id # ID –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è/–æ—Ç–º–µ–Ω—ã
    }

    if field == "exp_date":
        prompt_text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '{med_name}'.\n\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
        today = datetime.date.today()
        try:
            calendar_markup = await create_calendar(today.year, today.month)
            reply_markup = calendar_markup
            state_update_data.update(calendar_year=today.year, calendar_month=today.month)
        except Exception as e: logger.error(f"Failed to create calendar for editing: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    edit_success = await safe_edit_message(text=prompt_text, chat_id=chat_id, message_id=message_id, inline_message_id=inline_message_id, reply_markup=reply_markup)

    if edit_success:
        await state.set_state(EditMedicine.waiting_for_new_value)
        await state.update_data(**state_update_data)
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...")
    else: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ...
         logger.error(f"Failed to prompt for new value when editing. C/M ID: {chat_id}/{message_id}, Inline ID: {inline_message_id}"); await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", show_alert=True)


# --- Calendar Handlers ---
@dp.callback_query(CalendarNav.filter(F.action.in_({"prev_year", "prev_month", "next_month", "next_year"})), StateFilter("*")) # –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
async def handle_calendar_change(callback: types.CallbackQuery, callback_data: CalendarNav, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é."""
    current_year = callback_data.year
    current_month = callback_data.month

    new_year, new_month = current_year, current_month

    if callback_data.action == "prev_year": new_year -= 1
    elif callback_data.action == "next_year": new_year += 1
    elif callback_data.action == "prev_month":
        new_month -= 1
        if new_month == 0: new_month = 12; new_year -= 1
    elif callback_data.action == "next_month":
        new_month += 1
        if new_month == 13: new_month = 1; new_year += 1

    today_year = datetime.date.today().year
    if not (today_year - 5 <= new_year <= today_year + 10):
         await callback.answer("–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã.", show_alert=True)
         return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ---
    state_data = await state.get_data()
    inline_message_id = state_data.get("inline_message_id")
    chat_id = state_data.get("prompt_chat_id")
    message_id = state_data.get("calendar_message_id") # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º

    if not inline_message_id and not (chat_id and message_id):
         logger.error(f"Cannot find message ID to update calendar in state: {state_data}")
         await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.", show_alert=True)
         return

    try:
        new_markup = await create_calendar(new_year, new_month)
        await safe_edit_message(
            text=callback.message.text if callback.message else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", # –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –¥–ª—è inline
            chat_id=chat_id,
            message_id=message_id,
            inline_message_id=inline_message_id,
            reply_markup=new_markup
        )
        if await state.get_state() is not None:
             await state.update_data(calendar_year=new_year, calendar_month=new_month)
        await callback.answer(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar.month_name[new_month]} {new_year}")
    except Exception as e:
        logger.error(f"Error updating calendar view: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.", show_alert=True)


@dp.callback_query(CalendarNav.filter(F.action == "select_day"), StateFilter("*"))
async def handle_date_select(callback: types.CallbackQuery, callback_data: CalendarNav, state: FSMContext):
    # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ) ...
    year=callback_data.year; month=callback_data.month; day=callback_data.day; user_id=callback.from_user.id
    if day is None: return await callback.answer("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã.", show_alert=True)
    selected_date = datetime.date(year, month, day)
    if selected_date < datetime.date.today(): return await callback.answer("–°—Ä–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º.", show_alert=True)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%Y-%m-%d')}")

    await state.update_data(exp_date=selected_date.isoformat())
    current_state_str = await state.get_state()
    state_data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –∏–∑ state
    prompt_chat_id = state_data.get("prompt_chat_id")
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ str)
    calendar_message_id = state_data.get("calendar_message_id")
    inline_msg_id = state_data.get("inline_message_id") # ID inline, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏–∑ inline
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    chat_id_to_use = prompt_chat_id # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    # message_id_to_use –±—É–¥–µ—Ç –ª–∏–±–æ ID –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ None
    message_id_to_use = calendar_message_id if isinstance(calendar_message_id, int) else None
    # inline_id_to_use –±—É–¥–µ—Ç –ª–∏–±–æ ID inline —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ None
    inline_id_to_use = inline_msg_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline_message_id –∏–∑ state, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

    if current_state_str == AddMedicine.waiting_for_exp_date.state:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if chat_id_to_use and message_id_to_use:
             await _save_new_medicine(user_id, state, chat_id_to_use, message_id_to_use)
        else: logger.error("Missing chat_id/message_id for saving new med: {}", state_data); await state.clear()

    elif current_state_str == EditMedicine.waiting_for_new_value.state:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        med_id = state_data.get("med_id")
        field_to_edit = state_data.get("field_to_edit")
        if not med_id: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ med_id ...
             logger.error("Missing med_id for calendar edit save: {}", state_data); await state.clear(); return

        if field_to_edit == "exp_date":
            await _save_edited_medicine(
                user_id=user_id, med_id=med_id, field_to_edit=field_to_edit,
                new_value=selected_date, update_data_dict={"exp_date": selected_date.isoformat()},
                state=state,
                chat_id=chat_id_to_use, # ID —á–∞—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_id=message_id_to_use, # ID –æ–±—ã—á–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                inline_message_id=inline_id_to_use # ID inline –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
        else: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: –Ω–µ —Ç–æ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è ...
            logger.error(f"Calendar date selected while editing field '{field_to_edit}' for med_id '{med_id}'")
            await state.clear()
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é
            if inline_id_to_use: await show_main_menu_message(inline_message_id=inline_id_to_use)
            elif chat_id_to_use and message_id_to_use: await show_main_menu_message(chat_id=chat_id_to_use, message_id=message_id_to_use)

    else: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
        logger.warning(f"Calendar date selected in unexpected state: {current_state_str}")
        await state.clear()
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é
        if inline_id_to_use: await show_main_menu_message(inline_message_id=inline_id_to_use)
        elif callback.message: await show_main_menu_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)


@dp.callback_query(CalendarNav.filter(F.action == "ignore"), StateFilter("*"))
async def handle_calendar_ignore(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏)."""
    await callback.answer() # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

# --- Cancel Action Button ---
@dp.callback_query(F.data == "cancel_action", StateFilter("*"))
async def cancel_action_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞ –≤ FSM."""
    current_state = await state.get_state()
    if current_state is None:
         # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–æ –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –≤ –º–µ–Ω—é
         if callback.message:
             await show_main_menu_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
         elif callback.inline_message_id:
             await show_main_menu_message(inline_message_id=callback.inline_message_id)
         await callback.answer()
         return

    logger.info(f"Cancelling state {current_state} via callback button for user {callback.from_user.id}")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ state, —Ç.–∫. callback –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ---
    user_data = await state.get_data()
    chat_id = user_data.get("prompt_chat_id")
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ (–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ)
    message_id = user_data.get("calendar_message_id") or user_data.get("prompt_message_id")
    inline_message_id = user_data.get("inline_message_id")

    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞
    if inline_message_id:
        await show_main_menu_message(inline_message_id=inline_message_id)
    elif chat_id and message_id:
        await show_main_menu_message(chat_id=chat_id, message_id=message_id)
    else:
         logger.warning("Could not determine which message to edit after cancel callback.")
         # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
         await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
         return # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º answer() –¥–≤–∞–∂–¥—ã

    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# -----------------------------
# Reminder Task (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# -----------------------------
@aiocron.crontab('0 9 * * *') # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
async def daily_reminder():
    """–ù–∞—Ö–æ–¥–∏—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º/–∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –¥–ª—è –ö–ê–ñ–î–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    days_threshold = 30
    today = datetime.date.today()
    upcoming_limit = today + datetime.timedelta(days=days_threshold)
    max_len = 4096

    try:
        distinct_user_ids = await med_collection.distinct("added_by")
        if not distinct_user_ids:
            logger.info("No users with medicines found for reminders.")
            return

        logger.info(f"Checking reminders for {len(distinct_user_ids)} users.")

        for user_id in distinct_user_ids:
            logger.debug(f"Checking reminders for user {user_id}...")
            reminder_texts = []

            # Expiring soon
            query_soon = {
                "added_by": user_id,
                "exp_date": {"$gte": today.isoformat(), "$lte": upcoming_limit.isoformat()}
            }
            expiring_soon = await med_collection.find(query_soon).sort("exp_date").to_list(length=None)
            if expiring_soon:
                reminder_text_soon = f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ {days_threshold} –¥–Ω–µ–π:\n"
                for med in expiring_soon:
                    try:
                        exp_date_obj = datetime.date.fromisoformat(med['exp_date'])
                        days_left = (exp_date_obj - today).days
                        days_str = f"(–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)" if days_left >= 0 else ""
                        reminder_text_soon += f"- *{med['name']}*: `{med['exp_date']}` {days_str}\n"
                    except Exception:
                         reminder_text_soon += f"- *{med['name']}*: `{med['exp_date']}`\n"
                reminder_texts.append(reminder_text_soon)

            # Expired
            query_expired = {
                "added_by": user_id,
                "exp_date": {"$lt": today.isoformat()}
            }
            expired = await med_collection.find(query_expired).sort("exp_date").to_list(length=None)
            if expired:
                reminder_text_expired = f"üö® –í–Ω–∏–º–∞–Ω–∏–µ: –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏—Å—Ç–µ–∫:\n"
                for med in expired:
                    reminder_text_expired += f"- *{med['name']}*: `{med['exp_date']}`\n"
                reminder_texts.append(reminder_text_expired)

            # Send message
            if reminder_texts:
                full_message = "\n".join(reminder_texts)
                logger.info(f"Sending expiration reminders to user {user_id}.")
                try:
                    # Split message if too long
                    for i in range(0, len(full_message), max_len):
                         chunk = full_message[i:i+max_len]
                         # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —á–∞–Ω–∫ ---
                         if chunk.strip(): # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞–Ω–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                              await bot.send_message(user_id, chunk, parse_mode="Markdown")
                              await asyncio.sleep(0.2) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
                except Exception as e:
                    logger.error(f"Failed to send reminder to user {user_id}: {e}. Message chunk starts with: {chunk[:100] if 'chunk' in locals() else 'N/A'}...")
            else:
                logger.debug(f"No medicines expiring/expired found for user {user_id}.")

    except Exception as e:
        logger.error(f"An error occurred during the daily reminder task: {e}")


async def on_shutdown_global_client(bot: Bot):
     logger.warning('Shutting down..')
     logger.info("Closing MongoDB connection...")
     client.close()
     logger.info("MongoDB connection closed.")
     logger.warning('Bye!')

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Menu."""
    commands = [
        BotCommand(command="/start", description="üè† –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="/list", description="üíä –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤"),
        BotCommand(command="/add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"),
        BotCommand(command="/cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")


async def main():
    dp.shutdown.register(on_shutdown_global_client)
    await create_db_indexes()
    await set_bot_commands(bot)
    logger.info("Deleting any existing webhook configuration...")
    
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook deleted.")
    logger.info("Starting Medicine Inventory Bot...")
    try:
        await dp.start_polling(bot)
    finally:
        logger.info("Polling stopped.")


if __name__ == "__main__":
    import sys
    logger.remove()
    logger.add(sys.stderr, level="INFO", colorize=True, format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")
    # logger.add(sys.stderr, level="DEBUG", colorize=True, format="...") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.add("bot.log", rotation="1 MB", level="INFO")

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.warning("Bot stopped by user (KeyboardInterrupt/SystemExit)")